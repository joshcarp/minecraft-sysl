# Generates an entity-relationship diagram from the tables of model.sysl.

let sysl = //{./sysl};
let model = sysl.normalize(sysl.polish(sysl.load('out/model.pb')));

# Transforms a relation model into a set of table specs.
let toTables = \m
    m.types <&> m.fields nest |fieldName,fieldType,fk,opt,patterns,pk|columns
;

# Returns '|' if a field is required, or 'o' if not.
# Used to draw FK relationship cardinality of the target.
let zo = \f cond {f.opt: 'o', _: '|'};

# Returns an array of strings representing each column as an entity field.
let toRows = \cols cols orderby .fieldName >>
    let name = $`${cond {(!.opt || .pk): '* '}}${.fieldName}`;
    let type = $`${cond {.fk: $`**${.fieldType}** <<FK>>`, _: //str.lower(.fieldType)}}`;
    $`${name} : ${type}`;

# Transforms tables to an entity-relationship diagram.
let toErd = \tables $`
    @startuml
    skinparam component {
      BackgroundColor FloralWhite
      BorderColor Black
      ArrowColor Crimson
    }
    skinparam stereotypeCBackgroundColor Orchid
    hide methods

    ${tables orderby .typeName >> \(:appName, :typeName, columns:cols, ...) $`
    entity ${appName}.${typeName} {
      ${toRows(cols where .pk) ++ cond {cols where .pk: ['--']} ++ toRows(cols where !.pk)::\i}
    }`
    ::\n\n}

    ${tables orderby .typeName >> \(:appName, :typeName, :columns, ...)
        let fks = columns where .fk orderby .;
        $`${fks >> $`${appName}.${typeName:-15s} }o--${zo(.)}| ${.fk.appName}.${.fk.typeName}`::\i}`
    ::\i}
    @enduml
`;

toErd(toTables(model))
